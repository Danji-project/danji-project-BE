/*
 * This file is generated by jOOQ.
 */
package com.danjitalk.danjitalk.infrastructure.jooq.table.tables;


import com.danjitalk.danjitalk.infrastructure.jooq.table.Danjitalk;
import com.danjitalk.danjitalk.infrastructure.jooq.table.Keys;
import com.danjitalk.danjitalk.infrastructure.jooq.table.tables.records.BookmarkRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bookmark extends TableImpl<BookmarkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>danjitalk.bookmark</code>
     */
    public static final Bookmark BOOKMARK = new Bookmark();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookmarkRecord> getRecordType() {
        return BookmarkRecord.class;
    }

    /**
     * The column <code>danjitalk.bookmark.id</code>.
     */
    public final TableField<BookmarkRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>danjitalk.bookmark.created_at</code>.
     */
    public final TableField<BookmarkRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>danjitalk.bookmark.updated_at</code>.
     */
    public final TableField<BookmarkRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>danjitalk.bookmark.feed_id</code>.
     */
    public final TableField<BookmarkRecord, Long> FEED_ID = createField(DSL.name("feed_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>danjitalk.bookmark.member_id</code>.
     */
    public final TableField<BookmarkRecord, Long> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Bookmark(Name alias, Table<BookmarkRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bookmark(Name alias, Table<BookmarkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>danjitalk.bookmark</code> table reference
     */
    public Bookmark(String alias) {
        this(DSL.name(alias), BOOKMARK);
    }

    /**
     * Create an aliased <code>danjitalk.bookmark</code> table reference
     */
    public Bookmark(Name alias) {
        this(alias, BOOKMARK);
    }

    /**
     * Create a <code>danjitalk.bookmark</code> table reference
     */
    public Bookmark() {
        this(DSL.name("bookmark"), null);
    }

    public <O extends Record> Bookmark(Table<O> child, ForeignKey<O, BookmarkRecord> key) {
        super(child, key, BOOKMARK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Danjitalk.DANJITALK;
    }

    @Override
    public Identity<BookmarkRecord, Long> getIdentity() {
        return (Identity<BookmarkRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BookmarkRecord> getPrimaryKey() {
        return Keys.KEY_BOOKMARK_PRIMARY;
    }

    @Override
    public List<UniqueKey<BookmarkRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_BOOKMARK_UK5U0YIDGDJ1AYX5HXL0POD0JOV);
    }

    @Override
    public Bookmark as(String alias) {
        return new Bookmark(DSL.name(alias), this);
    }

    @Override
    public Bookmark as(Name alias) {
        return new Bookmark(alias, this);
    }

    @Override
    public Bookmark as(Table<?> alias) {
        return new Bookmark(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bookmark rename(String name) {
        return new Bookmark(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bookmark rename(Name name) {
        return new Bookmark(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bookmark rename(Table<?> name) {
        return new Bookmark(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, LocalDateTime, LocalDateTime, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
