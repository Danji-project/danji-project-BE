/*
 * This file is generated by jOOQ.
 */
package com.danjitalk.danjitalk.infrastructure.jooq.table.tables;


import com.danjitalk.danjitalk.infrastructure.jooq.table.Keys;
import com.danjitalk.danjitalk.infrastructure.jooq.table.Test;
import com.danjitalk.danjitalk.infrastructure.jooq.table.tables.records.FeedRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Feed extends TableImpl<FeedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>test.feed</code>
     */
    public static final Feed FEED = new Feed();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeedRecord> getRecordType() {
        return FeedRecord.class;
    }

    /**
     * The column <code>test.feed.comment_count</code>.
     */
    public final TableField<FeedRecord, Integer> COMMENT_COUNT = createField(DSL.name("comment_count"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>test.feed.reaction_count</code>.
     */
    public final TableField<FeedRecord, Integer> REACTION_COUNT = createField(DSL.name("reaction_count"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>test.feed.apartment_id</code>.
     */
    public final TableField<FeedRecord, Long> APARTMENT_ID = createField(DSL.name("apartment_id"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>test.feed.created_at</code>.
     */
    public final TableField<FeedRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>test.feed.id</code>.
     */
    public final TableField<FeedRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>test.feed.member_id</code>.
     */
    public final TableField<FeedRecord, Long> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>test.feed.updated_at</code>.
     */
    public final TableField<FeedRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>test.feed.file_url</code>.
     */
    public final TableField<FeedRecord, String> FILE_URL = createField(DSL.name("file_url"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>test.feed.thumbnail_file_url</code>.
     */
    public final TableField<FeedRecord, String> THUMBNAIL_FILE_URL = createField(DSL.name("thumbnail_file_url"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>test.feed.title</code>.
     */
    public final TableField<FeedRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>test.feed.contents</code>.
     */
    public final TableField<FeedRecord, String> CONTENTS = createField(DSL.name("contents"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>test.feed.feed_type</code>.
     */
    public final TableField<FeedRecord, String> FEED_TYPE = createField(DSL.name("feed_type"), SQLDataType.VARCHAR(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>test.feed.bookmark_count</code>.
     */
    public final TableField<FeedRecord, Integer> BOOKMARK_COUNT = createField(DSL.name("bookmark_count"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    private Feed(Name alias, Table<FeedRecord> aliased) {
        this(alias, aliased, null);
    }

    private Feed(Name alias, Table<FeedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>test.feed</code> table reference
     */
    public Feed(String alias) {
        this(DSL.name(alias), FEED);
    }

    /**
     * Create an aliased <code>test.feed</code> table reference
     */
    public Feed(Name alias) {
        this(alias, FEED);
    }

    /**
     * Create a <code>test.feed</code> table reference
     */
    public Feed() {
        this(DSL.name("feed"), null);
    }

    public <O extends Record> Feed(Table<O> child, ForeignKey<O, FeedRecord> key) {
        super(child, key, FEED);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Test.TEST;
    }

    @Override
    public Identity<FeedRecord, Long> getIdentity() {
        return (Identity<FeedRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FeedRecord> getPrimaryKey() {
        return Keys.KEY_FEED_PRIMARY;
    }

    @Override
    public Feed as(String alias) {
        return new Feed(DSL.name(alias), this);
    }

    @Override
    public Feed as(Name alias) {
        return new Feed(alias, this);
    }

    @Override
    public Feed as(Table<?> alias) {
        return new Feed(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Feed rename(String name) {
        return new Feed(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Feed rename(Name name) {
        return new Feed(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Feed rename(Table<?> name) {
        return new Feed(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, Integer, Long, LocalDateTime, Long, Long, LocalDateTime, String, String, String, String, String, Integer> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super Integer, ? super Integer, ? super Long, ? super LocalDateTime, ? super Long, ? super Long, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super Integer, ? super Integer, ? super Long, ? super LocalDateTime, ? super Long, ? super Long, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
